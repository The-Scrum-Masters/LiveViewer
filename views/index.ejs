<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Cruddly</title>
  <script
			  src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js"
			  crossorigin="anonymous"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>
  <link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
  <script src="https://rawgit.com/kimmobrunfeldt/progressbar.js/1.0.0/dist/progressbar.js"></script>
</head>
<style>
  div {
    margin: 20px;
    width: 200px;
    height: 200px;
    position: relative;
  }
  .bay {
    color: blue;
    font-size: 90px;

  }
  .center_it {
    margin-left: auto;
    margin-right: auto;
  }
  .center_table {
    margin-left: 250px;
    margin-right: auto;
  }

  .trolley_no {
    position: relative;
    left: 50%;
    top: 50%;
    padding: 0px;
    margin: 0px;
    transform: translate(-50%, -50%);
     color: rgb(170, 170, 170);
     font-family: &quot;Raleway&quot;,Helvetica,sans-serif;
    font-size: 2rem;
  }
</style>
<body>
  <nav class="navbar navbar-inverse center_it" style="width: 95%;">
    <ul class="nav navbar-nav center_it">
        <li><h2 style="color: white; padding: 0 10 0 0;">Live Trolleys</h2>/li>
    </ul>
  </nav>
  <div class="center_table">
  <table class="container panel panel-default" style="width:90% position: fixed;">
   <tr>
     <th><div id="bay1"><%- bay[0] %></div>
    </th>
     <th><div id="bay2"><%- bay[1] %></div></th>
     <th><div id="bay3"><%- bay[2] %></div></th>
   </tr>
   <th><div id="t_bay1"><%- bay[0] %> trolleys</div><br>
    <div id="n_bay1"></div>
   </th>
   <th><div id="t_bay2"><%- bay[1] %> trolleys</div><br>
    <div id="n_bay2"></div>
   </th>
   <th><div id="t_bay3"><%- bay[2] %> trolleys</div><br>
    <div id="n_bay3"></div>
   </th>
  </table>
  <div id="newContainer"/>
  <div id="numbers"/>
</div>
</body>
<script>
	//array of progress bars
	progressBarsHolder = {}
	
  function set_wheel( max, div_name) {
		get_val = parseInt(document.getElementById(div_name).innerHTML);
		document.getElementById(div_name).innerHTML = "";

		if (get_val > max) {
		  get_val = "EXCEED"
		}
		var bar = new ProgressBar.Circle(document.getElementById(div_name), {
		  color: '#aaa',
		  // This has to be the same size as the maximum width to
		  // prevent clipping
		  strokeWidth: 4,
		  trailWidth: 1,
		  easing: 'easeInOut',
		  duration: 1400,
		  text: {
		    autoStyleContainer: false
		},
		  from: { color: '#FF0000', width: 2 },

		  to: { color: '#00FF00', width: 3 },
		  // Set default step function for all animate calls
		  step: function(state, circle) {
		    circle.path.setAttribute('stroke', state.color);
		    circle.path.setAttribute('stroke-width', state.width);
		    circle.setText(div_name);
		  }
		});
		bar.text.style.fontFamily = '"Raleway", Helvetica, sans-serif';
		bar.text.style.fontSize = '2rem';
		bar.text.style.position = 'relative';


		bar.animate(get_val/max);
  }
  //set_wheel(6, "bay1");
  //set_wheel(6, "bay2");
  //set_wheel(6, "bay3");
  
  function newWheel(value, capacity, name)
  {
  	if (progressBarsHolder.hasOwnProperty(name))
  	{
  		//circle already exists, update
  		console.log("updating existing circle");
  		progressBarsHolder[name].animate(value/capacity);
  		return;
  	}
  
  
		container = document.getElementById("newContainer");
		
		var bar = new ProgressBar.Circle(container, {
		  color: '#aaa',
		  // This has to be the same size as the maximum width to
		  // prevent clipping
		  strokeWidth: 4,
		  trailWidth: 1,
		  easing: 'easeInOut',
		  duration: 1400,
		  text: {
		    autoStyleContainer: false
		},
		  from: { color: '#FF0000', width: 2 },

		  to: { color: '#00FF00', width: 3 },
		  // Set default step function for all animate calls
		  step: function(state, circle) {
		    circle.path.setAttribute('stroke', state.color);
		    circle.path.setAttribute('stroke-width', state.width);
		    var currentValue = Math.round(circle.value()*capacity);
		    circle.setText("Bay:" + name + ", Trolleys: " + currentValue + "/" + capacity);
		  }
		});
		bar.text.style.fontFamily = '"Raleway", Helvetica, sans-serif';
		bar.text.style.fontSize = '2rem';
		bar.text.style.position = 'relative';

		bar.animate(value/capacity);
		//register the circle, so we can check if it exists in later requests
		progressBarsHolder[name] = bar;
  }
  
  function checkEmptyBays(JSONdata)
  {
		for (var key in progressBarsHolder) {
				//console.log(key + " -> " + JSONdata[key]);
				name = key + "";//convert to string
				//console.log("name:");
				//console.log(name);
				//console.log("key");
				//console.log(key);
				if (!JSONdata.hasOwnProperty(name))
				{
					//because JSONdata doesn't have bay in it, we can assume that there 
					//are no trolleys in that bay.
					console.log("found empty Bay");
					progressBarsHolder[key].animate(0);
				}
		}
  }
  
  
	function displayData(JSONdata)
	{
		console.log(JSONdata);
		for (var key in JSONdata) {
				console.log(key + " -> " + JSONdata[key]);
				newWheel(JSONdata[key].count,JSONdata[key].capacity,key+"");
		}
	}
	
	function requestAndDisplay()
	{
		//Notes, this failes to update circles when their count falls to 0, as the
		//bay record isn't sent, thus we must manually check if the record is
		//missing and assume it has fallen to 0.
		$.get("update", function(data, status){
		    //alert("Data: " + data + "\nStatus: " + status);
		    displayData(data);
		    checkEmptyBays(data);
    	});	
	}
	
	setInterval(requestAndDisplay, 2000);
  
  
</script>
</html>
